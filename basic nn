#numpy: linear algebra library
import numpy as np

# sigmoid function: maps any number to a val bet 0-1; used to convert numbers to probabilities
def nonlin(x,deriv=False):
    if(deriv==True):
        return x*(1-x)
    return 1/(1+np.exp(-x))

# input dataset matrix
X = np.array([  [0,0,1],
                [0,1,1],
                [1,0,1],
                [1,1,1] ])

# output dataset matrix
y = np.array([[0,0,1,1]]).T

# seed random numbers to make calculation deterministic
np.random.seed(1)

# initialize weights randomly (mean 0)
syn0 = 2*np.random.random((3,1)) - 1

for iter in range(10000):

    # forward propagation
    #l0: first layer of network
    #l1: second, hiden layer of network
    l0 = X
    l1 = nonlin(np.dot(l0,syn0))

    # diff between predicted and actl
    l1_error = y - l1

    # multiply diff by slope of  sigmoid at l1 values
    l1_delta = l1_error * nonlin(l1,True)

    # update weights
    syn0 += np.dot(l0.T,l1_delta)

print ("Output After Training:")
print (l1)

#Creating another layer

# randomly initialize weights with mean 0
syn0 = 2*np.random.random((3,4)) - 1
syn1 = 2*np.random.random((4,1)) - 1

for j in range(60000):

	# Feed forward through layers 0, 1, and 2
    l0 = X
    l1 = nonlin(np.dot(l0,syn0))
    l2 = nonlin(np.dot(l1,syn1))

    # diff bet predicted and target
    l2_error = y - l2

    #contributed weight error
    if (j% 10000) == 0:
        print ("Error:" + str(np.mean(np.abs(l2_error))))

    # direction of the target l2
    # certainty
    l2_delta = l2_error*nonlin(l2,deriv=True)

    # how much did each l1 value contribute to the l2 error (according to the weights)?
    l1_error = l2_delta.dot(syn1.T)

    # direction of target l1
    # certainty
    l1_delta = l1_error * nonlin(l1,deriv=True)

    syn1 += l1.T.dot(l2_delta)
    syn0 += l0.T.dot(l1_delta)
